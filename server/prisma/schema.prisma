// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PGSQL_DATABASE_URL")
}

model Admin {
  id Int @id @default(autoincrement())
  username String @unique
  email    String @unique
  password String
  role     Role   @default(AUTHOR)

  //relations
  events Event[]

  // meta data
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Moderator {
  id Int @id @default(autoincrement())

  username String @unique
  email    String @unique
  password String
  faculty  String
  role     Role   @default(MODERATOR)

  //relations


  // meta data
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Author {
  id Int @id @default(autoincrement())

  username String @unique
  email    String @unique
  password String
  faculty  String
  role     Role   @default(AUTHOR)

  //relations


  // meta data
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Event {
  id          Int       @id @default(autoincrement())
  name        String
  description String

  // relations
  sections    Section[]
  adminId   Int
  admin     Admin    @relation(fields: [adminId], references: [id])

  // meta data
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id        Int      @id @default(autoincrement())
  name      String
  order    Float

  // relations
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])

  // meta data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  MODERATOR
  AUTHOR
}

// model User {
//   id Int @id @default(autoincrement())

//   // common attributes
//   username String @unique
//   email    String @unique
//   password String

//   // website specific
//   role     Role    @default(AUTHOR)
//   verified Boolean @default(false)

//   // personal details
//   firstName         String
//   lastName          String
//   middleName        String?
//   birthDate         DateTime
//   region            String
//   city              String
//   participantStatus String
//   universityName    String
//   facultyName       String
//   course            Int
//   phone             String   @unique
//   telegramUsername  String   @unique
//   socialMediaLink   String   @unique

//   // relations
//   participations Participation[]
//   reviews        Review[]

//   // meta data
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Event {
//   id          Int       @id @default(autoincrement())
//   name        String
//   startDate   DateTime
//   endDate     DateTime
//   sections    Section[]
//   description String
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
// }

// model Section {
//   id             Int             @id @default(autoincrement())
//   name           String
//   eventId        Int
//   event          Event           @relation(fields: [eventId], references: [id])
//   participations Participation[]
//   createdAt      DateTime        @default(now())
//   updatedAt      DateTime        @updatedAt
// }

// model Participation {
//   id        Int      @id @default(autoincrement())
//   authorId  Int
//   sectionId Int
//   fileId    Int      @unique
//   author    User     @relation(fields: [authorId], references: [id])
//   section   Section  @relation(fields: [sectionId], references: [id])
//   file      File?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   review    Review?
// }

// model File {
//   id            Int           @id @default(autoincrement())
//   url           String
//   uploadedAt    DateTime      @default(now())
//   participation Participation @relation(fields: [id], references: [fileId])
// }

// model Review {
//   id              Int           @id @default(autoincrement())
//   moderatorId     Int
//   participationId Int           @unique
//   status          ReviewStatus
//   comment         String?
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt
//   moderator       User          @relation(fields: [moderatorId], references: [id])
//   participation   Participation @relation(fields: [participationId], references: [id])
// }
